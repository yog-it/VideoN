@using Oqtane.Modules.Controls
@using YogIT.Module.VideoN.Services
@using YogIT.Module.VideoN.Models

@namespace YogIT.Module.VideoN
@inherits ModuleBase
@inject IVideoNService VideoNService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Edit> Localizer

@if (_videoN != null)
{
    <div class="container">
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="source" HelpText="Select the video source location" ResourceKey="Source">Source Location: </Label>
            <div class="col-sm-9">
                <select id="source-type" class="form-control" value="@_sourceType" required @onchange="ChangeSourceType">
                    <option value="">@Localizer["SelectSourceType.Text"]</option>
                    <option value="Server">@Localizer["Server.Text"]</option>
                    <option value="Azure">@Localizer["Azure.Text"]</option>
                    <option value="YouTube">@Localizer["YouTube.Text"]</option>
                    <option value="WebUrl">@Localizer["WebUrl.Text"]</option>
                </select>
            </div>
        </div>
        <div class="@_webUrl">
            <WebUrl Id="@_id"></WebUrl>
        </div>
        <div class="@_server">
            <ServerFiles Id="@_id"></ServerFiles>
        </div>
    </div>
}



@code {
    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;

    public override string Actions => "Add,Edit";

    public override string Title => "Manage VideoN";

    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" }
    };

    private int _id;
    private VideoN _videoN;
    private string _sourceType = "";
    private string _server = "d-none";
    private string _webUrl = "d-none";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (PageState.Action == "Edit")
            {
                _id = Int32.Parse(PageState.QueryString["id"]);
                _videoN = await VideoNService.GetVideoNAsync(_id, ModuleState.ModuleId);
                _sourceType = _videoN.SourceType;
                SetSourceType();
            }
            if (_videoN == null)
            {
                _videoN = new VideoN();
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading VideoN {VideoNId} {Error}", _id, ex.Message);
            AddModuleMessage(Localizer["Message.LoadError"], MessageType.Error);
        }
    }

    private Task ChangeSourceType(ChangeEventArgs e)
    {
        _sourceType = e.Value.ToString();
        SetSourceType();
        return Task.CompletedTask;
    }

    private void SetSourceType()
    {
        _server = "d-none";
        _webUrl = "d-none";
        switch (_sourceType)
        {
            case "Server":
                _server = "";
                break;
            case "WebUrl":
                _webUrl = "";
                break;
        }
    }
}
