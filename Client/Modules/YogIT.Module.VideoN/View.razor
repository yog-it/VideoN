@using YogIT.Module.VideoN.Models
@using YogIT.Module.VideoN.Services

@namespace YogIT.Module.VideoN
@inherits LocalizableComponent
@inject IStringLocalizer<View> Localizer
@inject IVideoNService VideoNService

@if (_videoN != null)
{
    <h3>@_videoN.Title</h3>
    <Player Id="@_playerKey.ToString()" Url="@_videoN.Source" SourceType="@_videoN.SourceType" Poster="@_videoN.Poster" TechOrder="@_videoN.TechOrder" @key="_playerKey" />
    <div>@_videoN.Description</div>
}
<div class="row">
    <div class="col-sm-12">
        <NavLink class="btn btn-secondary" href="@NavigateUrl()">@Localizer["Back"]</NavLink>
    </div>
</div>
@code {
    private VideoN _videoN;
    private string _playerKey;

    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = Oqtane.Shared.ResourceType.Script, Url = ModulePath() + "videojs/videojs.min.js" },  
        new Resource { ResourceType = Oqtane.Shared.ResourceType.Script, Url = ModulePath() + "videojs/Youtube.min.js" },
        new Resource { ResourceType = Oqtane.Shared.ResourceType.Stylesheet, Url = ModulePath() + "videojs/videojs.min.css" },
        new Resource { ResourceType = Oqtane.Shared.ResourceType.Stylesheet, Url = ModulePath() + "Module.css" }
    };

    protected override async Task OnInitializedAsync()
    {
        var id = Int32.Parse(PageState.QueryString["id"]);
        try
        {
            Random generator = new Random();
            _playerKey = generator.Next(100000, 999999).ToString();
            _videoN = await VideoNService.GetVideoNAsync(id, ModuleState.ModuleId);

            string poster = string.IsNullOrEmpty(_videoN.Poster) ? ModulePath() + "videojs/poster.png" : _videoN.Poster;

            if (_videoN.SourceType.Equals("YouTube"))
            {
                _videoN.TechOrder = "youtube";
                _videoN.SourceType = "video/youtube";
                poster = "";
                _videoN.Source = "https://www.youtube.com/watch?v=" + _videoN.Source;
            }
            else
            {
                _videoN.TechOrder = "html5";
                _videoN.SourceType = "video/mp4";
            }
            _videoN.Poster = poster;
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading VideoN {VideoNId} {Error}", id, ex.Message);
            AddModuleMessage(Localizer["Message.LoadError"], MessageType.Error);
        }
    }
}
