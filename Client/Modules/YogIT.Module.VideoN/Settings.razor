@namespace YogIT.Module.VideoN
@inherits ModuleBase
@inject ISettingService SettingService
@inject IStringLocalizer<Settings> Localizer

<div class="container">
    <div class="row mb-1 align-items-center">
        <Label Class="col-sm-3" For="items" ResourceKey="Items" ResourceType="@resourceType" HelpText="Enter the maximum items per page">Items Per Page: </Label>
        <div class="col-sm-9">
            <input id="items" type="text" class="form-control" @bind="@_pageSize" maxlength="1" required />
        </div>
    </div>
    <div class="row mb-1 align-items-center">
        <Label Class="col-sm-3" For="columnCssClass" HelpText="Bootstrap classes for each column in the grid." ResourceKey="ColumnCssClass" ResourceType="@resourceType">Column CSS Class: </Label>
        <div class="col-sm-9">
            <input id="columnCssClass" type="text" class="form-control" @bind="@_columnCssClass" />
        </div>
    </div>
</div>

@code {
    private string resourceType = "YogIT.Module.VideoN.Settings, YogIT.Module.VideoN.Client.Oqtane"; // for localization
    public override string Title => "VideoN Settings";

    private string _pageSize;
    private string _columnCssClass;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Dictionary<string, string> settings = await SettingService.GetModuleSettingsAsync(ModuleState.ModuleId);
            _pageSize = SettingService.GetSetting(ModuleState.Settings, "PageSize", "9");
            _columnCssClass = SettingService.GetSetting(settings, "ColumnCssClass", "col-xl-3 col-lg-4 col-md-6 col-12");
        }
        catch (Exception ex)
        {
            ModuleInstance.AddModuleMessage(ex.Message, MessageType.Error);
        }
    }

    public async Task UpdateSettings()
    {
        try
        {
            Dictionary<string, string> settings = await SettingService.GetModuleSettingsAsync(ModuleState.ModuleId);
            settings = SettingService.SetSetting(settings, "PageSize", _pageSize);
            settings = SettingService.SetSetting(settings, "ColumnCssClass", _columnCssClass);

            await SettingService.UpdateModuleSettingsAsync(settings, ModuleState.ModuleId);
        }
        catch (Exception ex)
        {
            ModuleInstance.AddModuleMessage(ex.Message, MessageType.Error);
        }
    }
}
